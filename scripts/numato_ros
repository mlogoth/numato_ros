#!/usr/bin/env python2

import os
import rospy
import serial
from serial import SerialTimeoutException
import sys
from ikh_ros_msgs.msg import Labjack_dout, Bumper_v2
from time import sleep
from std_msgs.msg import Bool


CMDS = {
    0: "clear",
    1: "set",
    True: "set",
    False: "clear"
}



class GPIO:
    def __init__(self,serPort,logic,SERIAL_READ_SIZE=25):
        self.serPort = serPort
        self.logic = logic
        self.SERIAL_READ_SIZE = SERIAL_READ_SIZE
    
    def pin_to_index(self,pin):
        if (int(pin) < 10):
            return str(pin)
        else:
            return chr(55 + int(pin))
    
    def readIO(self,pin):
        try:
            self.serPort.write("gpio read "+ self.pin_to_index(pin) + "\n\r")
            res  = str(self.serPort.read(self.SERIAL_READ_SIZE))
            return res[-4]
        except Exception as e: 
                rospy.logwarn("Cannot read serial: {}".format(e))
                return False
    
    
    def getAvgBool(self,arr,pin=None):
        true_counts = arr.count(True)
        false_counts = arr.count(False)
        res_size = len(arr)
        # print("> readIOAvg at: {}".format(rospy.Time.now().to_sec()-tic))
        # Check if all inputs are the same
        if (arr.count(False)==len(arr)):
            return False
        elif (arr.count(True)==len(arr)):
            return True
        else:
            if(pin!=None):
                rospy.logwarn("PIN: {}: False trigger IO, return False | True counts: {} False counts: {} Result size: {}".format(pin,true_counts,false_counts,res_size))
            else:
                rospy.logwarn("False trigger IO, return False | True counts: {} False counts: {} Result size: {}".format(true_counts,false_counts,res_size))
            return False
        
    
    
    def readIOAvgBool(self,pin,readtimes=8):
        results = []
        try:
            for i in range(readtimes):
                self.serPort.write("gpio read "+ self.pin_to_index(pin) + "\n\r")
                res  = str(self.serPort.read(self.SERIAL_READ_SIZE))
                results.append(self.str2bool(res[-4]))
            return self.getAvgBool(results,pin)
        
        except Exception as e: 
                rospy.logwarn("Cannot read serial: {}".format(e))
                return False
        
    def readMultIO(self,pins=[]):
        try:
            self.serPort.write("gpio readall\n\r")
            res  = str(self.serPort.read(1000))
            #hex read
            hx = res[res.find("\n"):res.find(">")]
            # binary string
            bn =  bin(int(str(hx), 16))[2:][::-1]
            # read for pins
            result = {}
            for pin in pins:
                if (pin != None):
                    result[pin]=self.str2bool(bn[pin])
            return result
        except Exception as e: 
                rospy.logwarn("Cannot read serial: {}".format(e))
                result = {}
                for pin in pins:
                    if (pin != None):
                        result[pin] = False
                return result
            
    
    def readMultIOAvg(self,pins=[],readtimes=8):
        try:
            result = {}
            for pin in pins:
                    if (pin != None):
                        result[pin]=[]
            for i in range(readtimes):
                self.serPort.write("gpio readall\n\r")
                res = str(self.serPort.read(1000))
                #hex read
                hx = res[res.find("\n"):res.find(">")]
                # binary string
                bn =  bin(int(str(hx), 16))[2:][::-1]
                # read for pins
                for pin in pins:
                    if (pin != None):
                        result[pin].append(self.str2bool(bn[pin]))
            
            result_avg = {}
            for _pin in result.keys():
                result_avg[_pin] = self.getAvgBool(result[_pin],_pin)
            return result_avg
        except Exception as e: 
            rospy.logwarn("Cannot read serial: {}".format(e))
            result = {}
            for pin in pins:
                if (pin != None):
                    result[pin] = False
            return result

    def writeIO(self,pin,state):
        self.serPort.write("gpio "+ CMDS[state] +" "+ self.pin_to_index(pin)  + "\r")
        res  = str(self.serPort.read(self.SERIAL_READ_SIZE))
        return res
        
        
    def get_result(self,result):
        if(type(result)!=bool):
            return False
        if (self.logic=="Inverted"):
            return not(result)      
        else:
            return result
    
    def str2bool(self,value,pin=""):
        if (value in ["0","False","false"] ):
            return False
        elif (value in ["1","True","true"]):
            return True
        else:
            return None
    
    
    


class Digital_Output(GPIO):
    def __init__(self, id, configs, serPort):
        GPIO.__init__(self,serPort,"Inverted",SERIAL_READ_SIZE=25)
        self.id = id
        self.topic_name = configs['outputs'][id]["topic_name"]
        self.pin = configs['outputs'][id]["pin"]
        self.logic = configs['outputs'][id]["logic"]
        self.serPort = serPort
        self.msg = Labjack_dout()
        self.msg.header.stamp = rospy.Time.now()

        self.rate = 15.0
        self.topic_sub = False
        self.state = False
        
        self.sub = rospy.Subscriber(self.topic_name, Bool, self.callback)
    
    def callback(self,data):
        self.topic_sub = True
        self.state = bool(data.data)

    def update_publish(self):
        if (self.topic_sub):
            if self.logic == "Normal":
                    res = self.writeIO(self.pin,self.state)
            elif self.logic == "Inverted":
                    res= self.writeIO(self.pin,not(self.state))
            self.topic_sub = False

class Digital_Constants(GPIO):
    def __init__(self, id, configs, serPort):
        GPIO.__init__(self,serPort,"Inverted",SERIAL_READ_SIZE=25)
        self.id = id
        self.topic_name = configs['constants'][id]["topic_name"]
        self.pin = configs['constants'][id]["pin"]
        self.logic = configs['constants'][id]["logic"]
        self.value = configs['constants'][id]["value"]
        self.serPort = serPort
        self.msg = Labjack_dout()
        self.msg.header.stamp = rospy.Time.now() 
        
        self.sub_flag = True
        self.set = False
        self.update_publish()

        
    def update_publish(self):
        if self.logic == "Normal":
            res = self.writeIO(self.pin,self.value)
        elif self.logic == "Inverted":
            res = self.writeIO(self.pin,not(self.value))


class Digital_Input(GPIO):
    def __init__(self, id, configs, serPort):
        GPIO.__init__(self,serPort,"Inverted",SERIAL_READ_SIZE=25)
        self.id = id
        self.topic_name = configs['inputs'][id]["topic_name"]
        self.serPort = serPort
        self.msg = Labjack_dout()
        self.msg.header.stamp = rospy.Time.now() 
        
        self.pin = configs['inputs'][id]["pin"]
        self.logic = configs['inputs'][id]["logic"]
        
        self.pub = rospy.Publisher(self.topic_name, Labjack_dout, queue_size=1)

    
    def update_publish(self):
        if (self.pub.get_num_connections()>0):
                self.msg.header.stamp = rospy.Time.now()
                self.msg.header.frame_id = self.topic_name
                res = self.str2bool(self.readIO(self.pin),self.topic_name)
                if (type(res)==bool):
                    if self.logic == "Normal":
                        self.msg.state = res # pin state is normally at HIGH
                    elif self.logic == "Inverted":
                        self.msg.state = not(res) # pin state is normally at LOW
                    self.pub.publish(self.msg)


class Digital_Input_bumper_v2(GPIO):
    def __init__(self, id, configs, serPort):
        GPIO.__init__(self,serPort,"Inverted",SERIAL_READ_SIZE=25)
        self.id = id
        self.topic_name = configs['bumper_v2'][id]["topic_name"]
        self.serPort  = serPort
        self.logic = configs['bumper_v2'][id]["logic"]
        self.msg = Bumper_v2()
        # Low Center Bumper Layer
        try:
            self.pin_lcb = configs['bumper_v2'][id]['low_center_bumper']
        except:
            rospy.logwarn(self.topic_name+":low center bumper layer has not been defined!")
            self.pin_lcb = None
        # Low left bumper layer
        try:
            self.pin_llb = configs['bumper_v2'][id]['low_left_bumper']
        except:
            rospy.logwarn(self.topic_name+":low left bumper layer has not been defined!")
            self.pin_llb = None
        # Low right bumper layer
        try:
            self.pin_lrb = configs['bumper_v2'][id]['low_right_bumper']
        except:
            rospy.logwarn(self.topic_name+":low right bumper layer has not been defined!")
            self.pin_lrb = None
        # High center bumper  
        try:
            self.pin_hcb = configs['bumper_v2'][id]['high_center_bumper']
        except:
            rospy.logwarn(self.topic_name+":high center bumper layer has not been defined!")
            self.pin_hcb = None
        
        # High right bumper  
        try:
            self.pin_hrb = configs['bumper_v2'][id]['high_right_bumper']
        except:
            rospy.logwarn(self.topic_name+":high right bumper layer has not been defined!")
            self.pin_hrb = None
        
        # High left bumper  
        try:
            self.pin_hlb = configs['bumper_v2'][id]['high_left_bumper']
        except:
            rospy.logwarn(self.topic_name+":high left bumper layer has not been defined!")
            self.pin_hlb = None
        
        # State bumper  
        try:
            self.pin_sb = configs['bumper_v2'][id]['state_bumper']
        except:
            rospy.logwarn(self.topic_name+" :state bumper layer has not been defined!")
            self.pin_sb = None
        

        self.pub = rospy.Publisher(self.topic_name, Bumper_v2, queue_size=1)
    

    def update_publish(self):
        if (self.pub.get_num_connections()>0):
            # Reading Digital Inputs
                res = self.readMultIOAvg([self.pin_lcb,self.pin_lrb,self.pin_llb,self.pin_hrb,self.pin_hcb,self.pin_hlb,self.pin_sb])
                msg = Bumper_v2()
                if (self.pin_lcb!=None):
                    msg.low_bumper_center = self.get_result(res[self.pin_lcb])
                
                if (self.pin_lrb!=None):
                    msg.low_bumper_right = self.get_result(res[self.pin_lrb])
                
                if (self.pin_llb!=None):
                    msg.low_bumper_left = self.get_result(res[self.pin_llb])
                
                if (self.pin_hrb!=None):
                    msg.high_bumper_right = self.get_result(res[self.pin_hrb])
                
                if (self.pin_hcb!=None):
                    msg.high_bumper_center = self.get_result(res[self.pin_hcb])
                
                if (self.pin_hlb!=None):
                    msg.high_bumper_left = self.get_result(res[self.pin_hlb])

                if (self.pin_sb!=None):
                    msg.bumper_state = self.get_result(res[self.pin_sb])
                                
                # Write values of T4 to message
                msg.header.stamp = rospy.Time.now()
                msg.header.frame_id = self.topic_name
                self.pub.publish(msg)




class NumatoRelayInterface:
    def __init__(self):
        self.port = rospy.get_param('~port', '/dev/ttyNUMATO')
        self.baud = rospy.get_param('~baud', 115200)
        self.timeout = rospy.get_param('~timeout', 1)
        self.objs = None

        if not os.path.exists(self.port):
            rospy.logwarn("Serial port {} does not exist. Waiting for it to appear...".format(self.port))
            rate = rospy.Rate(2)
            while not os.path.exists(self.port) and not rospy.is_shutdown():
                rate.sleep()

            if not rospy.is_shutdown():
                rospy.loginfo("Serial port {} showed up! Starting Numato relay interface node".format(self.port))
            else:
                rospy.loginfo("Shutting down Numato relay interface node")
                sys.exit(0)

        self.serial_port = serial.Serial(self.port, self.baud, timeout=self.timeout)
        self.tmr = None
        

    def read_params(self):
        if rospy.has_param("numato") :
            configs = rospy.get_param("numato")
            return configs
        else:
            rospy.logerr("Parameter server has no numato parameters!")
            exit(0)
    
    
    def dictionary2objectlist(self,configs):
        # this function gets all the parameters of the yaml, check for errors and returns a list "topics" of every object.

        # try except condition for handling missing key error
        try:
            constants = [Digital_Constants(keys, configs,self.serial_port) for keys in configs['constants']]
            rospy.sleep(1.0)
        except KeyError:
            constants = []
        
        try:
            single_input = [Digital_Input(keys, configs, self.serial_port) for keys in configs['inputs']]
        except KeyError:
            single_input = []
                
        try:
            single_output = [Digital_Output(keys, configs,self.serial_port) for keys in configs['outputs']]
        except KeyError:
            single_output = []

        try:
            bumper_input_v2 = [Digital_Input_bumper_v2(keys, configs,self.serial_port) for keys in configs['bumper_v2']]
        except KeyError:
            bumper_input_v2 = []
            
        topics = single_input + single_output + bumper_input_v2 + constants
        return topics
    
    
    def callback(self, event):
        for _io in self.objs:
                _io.update_publish()
        
    def run(self):
        configs = self.read_params()
        self.objs = self.dictionary2objectlist(configs)
        rate = rospy.get_param("~rate",10)
        rospy.Timer(rospy.Duration(1.0 / float(rate)), self.callback)
        rospy.spin()


if __name__ == "__main__":
    rospy.init_node('numato_driver')
    try:
        nri = NumatoRelayInterface()
        nri.run()
    except (KeyboardInterrupt, SystemExit):
        for obj in nri.objs:
            del obj
        
